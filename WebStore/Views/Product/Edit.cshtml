@model WebStore.Models.Product

@{
    ViewBag.Title = "Edit Product";
}

<h2>Edit Product</h2>

@using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(m => m.ProductId)
        @Html.TextBoxFor(m => m.ProductId, new { @class = "form-control", @readonly = "readonly" })
        @Html.ValidationMessageFor(m => m.ProductId, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ProductName)
        @Html.TextBoxFor(m => m.ProductName, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.ProductName, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Price)
        @Html.TextBoxFor(m => m.Price, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Rating)
        @Html.TextBoxFor(m => m.Rating, new { @class = "form-control", type = "number", min = "0", max = "5" })
        @Html.ValidationMessageFor(m => m.Rating, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Version)
        @Html.TextBoxFor(m => m.Version, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Version, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.CategoryId)
        @Html.DropDownList("CategoryId", null, "Select Category", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.CategoryId, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Description)
        @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Current Images")
        @if (!string.IsNullOrEmpty(Model.ImageList))
        {
            <div class="row">
                @foreach (var imagePath in Model.ImageList.Split(','))
                {
                    if (!string.IsNullOrEmpty(imagePath))
                    {
                        <div class="col-md-3 mb-2">
                            <img src="@Url.Content("~/Content/Images/" + imagePath)" class="img-thumbnail" style="max-height: 150px;" />
                        </div>
                    }
                }
            </div>
        }
    </div>

    <div class="form-group">
        @Html.Label("Update Images")
        <input type="file" name="NewImages" multiple accept="image/*" class="form-control" />
        @Html.HiddenFor(m => m.ImageList)
        <small class="text-muted">Chọn ảnh mới nếu bạn muốn thay thế ảnh cũ</small>
    </div>

    <div class="form-group mt-3">
        <button type="submit" class="btn btn-primary">Save Changes</button>
        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary" })
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $('input[type="file"]').change(function () {
                var fileInput = $(this);
                var files = fileInput[0].files;
                var maxSize = 5 * 1024 * 1024; // 5MB

                for (var i = 0; i < files.length; i++) {
                    if (files[i].size > maxSize) {
                        alert('File "' + files[i].name + '" quá lớn. Kích thước tối đa là 5MB.');
                        fileInput.val('');
                        return;
                    }
                }
            });
        });
    </script>
}