@model WebStore.Models.Product
@{
    ViewBag.Title = "Product Details";
}

<style>
    .product-images {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .product-image {
        max-width: 300px;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .product-info {
        flex: 1;
        min-width: 300px;
    }

    .product-title {
        font-size: 2rem;
        margin-bottom: 15px;
    }

    .product-price {
        font-size: 1.5rem;
        color: #e74c3c;
        margin: 10px 0;
    }

    .product-description {
        margin: 15px 0;
        line-height: 1.6;
    }

    .product-rating {
        margin: 10px 0;
    }

    .star {
        color: #f1c40f;
    }

    .product-actions {
        display: flex;
        gap: 15px;
        margin: 20px 0;
        align-items: center;
    }

    .quantity-input {
        width: 100px;
    }

        .quantity-input input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

    .btn-add-cart, .btn-buy-now {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-add-cart {
        background-color: #3498db;
        color: white;
    }

        .btn-add-cart:hover {
            background-color: #2980b9;
        }

    .btn-buy-now {
        background-color: #2ecc71;
        color: white;
    }

        .btn-buy-now:hover {
            background-color: #27ae60;
        }

    .favorite-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #e74c3c;
        margin-left: 10px;
    }

    .specifications {
        margin-top: 20px;
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 5px;
    }

    .spec-title {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .spec-item {
        display: flex;
        margin: 5px 0;
    }

    .spec-label {
        width: 120px;
        font-weight: bold;
    }
</style>

<div class="details-container">
    @Html.AntiForgeryToken()

    <div class="product-images">
        @if (!string.IsNullOrEmpty(Model.ImageList))
        {
            var images = Model.ImageList.Split(',');
            foreach (var image in images)
            {
                <img src="@Url.Content("~/Content/Images/" + image)" alt="@Model.ProductName" class="product-image" />
            }
        }
    </div>

    <div class="product-info">
        <div style="display: flex; align-items: center;">
            <h1 class="product-title">@Model.ProductName</h1>
            <button class="favorite-btn" data-product-id="@Model.ProductId">
                <i class="@(Model.IsFavorite == true ? "fas" : "far") fa-heart"></i>
            </button>
        </div>
        <div class="product-price">$@Model.Price.ToString("N2")</div>
        <div class="product-category">Category: @Model.Category.CategoryName</div>
        <div class="product-description">@Model.Description</div>

        @if (Model.Rating.HasValue)
        {
            <div class="product-rating">
                Rating:
                @for (int i = 0; i < Math.Floor(Model.Rating.Value); i++)
                {
                    <span class="star">⭐</span>
                }
                (@Model.Rating.Value.ToString("N1"))
            </div>
        }

        <div class="product-version">Version: @Model.Version</div>

        <div class="product-actions">
            <div class="quantity-input">
                <input type="number" id="quantity@(Model.ProductId)" value="1" min="1" max="99" class="form-control" />
            </div>

            <button type="button" class="btn-add-cart" data-product-id="@Model.ProductId">
                <i class="fas fa-cart-plus"></i> Add to Cart
            </button>

            @using (Html.BeginForm("BuyNow", "Order", FormMethod.Post, new { id = $"buyNowForm{Model.ProductId}" }))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("productId", Model.ProductId)
                @Html.Hidden("quantity", 1, new { id = $"buyNowQuantity{Model.ProductId}" })
                <button type="submit" class="btn-buy-now">
                    <i class="fas fa-bolt"></i> Buy Now
                </button>
            }
        </div>

        <div class="specifications">
            <div class="spec-title">Product Specifications</div>
            <div class="spec-item">
                <span class="spec-label">Product ID:</span>
                <span class="spec-value">@Model.ProductId</span>
            </div>
            <div class="spec-item">
                <span class="spec-label">Category:</span>
                <span class="spec-value">@Model.Category.CategoryName</span>
            </div>
            <div class="spec-item">
                <span class="spec-label">Version:</span>
                <span class="spec-value">@Model.Version</span>
            </div>
            @if (Model.Rating.HasValue)
            {
                <div class="spec-item">
                    <span class="spec-label">Rating:</span>
                    <span class="spec-value">@Model.Rating.Value.ToString("N1")/5</span>
                </div>
            }
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@section Scripts {
    <script>
        $(document).ready(function() {
            // Add to cart button click handler
            $('.btn-add-cart').click(function(e) {
                e.preventDefault();
                var productId = $(this).data('product-id');
                var quantity = parseInt($("#quantity" + productId).val());

                if (isNaN(quantity) || quantity < 1 || quantity > 99) {
                    Swal.fire({
                        title: 'Invalid Quantity',
                        text: 'Please enter a quantity between 1 and 99',
                        icon: 'error'
                    });
                    return;
                }

                var token = $('input[name="__RequestVerificationToken"]').val();

                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        quantity: quantity,
                        __RequestVerificationToken: token
                    },
                    success: function(response) {
                        if (response.success) {
                            Swal.fire({
                                title: 'Success',
                                text: 'Product added to cart',
                                icon: 'success',
                                timer: 1500,
                                showConfirmButton: false
                            });
                            updateCartCount(response.cartCount);
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'Failed to add product to cart',
                                icon: 'error'
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        Swal.fire({
                            title: 'Error',
                            text: 'An error occurred while processing your request',
                            icon: 'error'
                        });
                        console.error('Error:', error);
                    }
                });
            });

            // Favorite button click handler
            $('.favorite-btn').click(function(e) {
                e.preventDefault();
                var productId = $(this).data('product-id');
                var token = $('input[name="__RequestVerificationToken"]').val();
                var $icon = $(this).find('i');

                $.ajax({
                    url: '@Url.Action("ToggleFavorite", "Product")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        __RequestVerificationToken: token
                    },
                    success: function(response) {
                        if (response.success) {
                            $icon.toggleClass('far fas');
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'Failed to update favorite status',
                                icon: 'error'
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        Swal.fire({
                            title: 'Error',
                            text: 'An error occurred while processing your request',
                            icon: 'error'
                        });
                        console.error('Error:', error);
                    }
                });
            });

            // Quantity input handler
            $('[id^="quantity"]').on('input change', function() {
                var productId = this.id.replace('quantity', '');
                var quantity = parseInt($(this).val());

                if (quantity < 1) {
                    $(this).val(1);
                    quantity = 1;
                } else if (quantity > 99) {
                    $(this).val(99);
                    quantity = 99;
                }

                $("#buyNowQuantity" + productId).val(quantity);
            });
        });

        function updateCartCount(count) {
            var $cartCount = $("#cartCount");
            $cartCount.text(count);

            // Optional: Add animation effect
            $cartCount.addClass('bounce');
            setTimeout(function() {
                $cartCount.removeClass('bounce');
            }, 1000);
        }
    </script>
}