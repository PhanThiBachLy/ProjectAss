@model IEnumerable<WebStore.Models.Product>

<style>
    .products-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        padding: 15px;
        max-width: 1000px;
        margin: 0 auto;
    }

    .product-card {
        display: block;
        background: white;
        border-radius: 8px;
        padding: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s ease;
        text-decoration: none;
        color: inherit;
        position: relative;
    }

        .product-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

    .product-image-container {
        width: 100%;
        height: 180px;
        overflow: hidden;
        border-radius: 6px;
        margin-bottom: 10px;
    }

        .product-image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .product-name {
        font-size: 1.1rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 6px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-category {
        font-size: 0.85rem;
        color: #666;
        margin-bottom: 6px;
    }

    .product-description {
        font-size: 0.85rem;
        color: #777;
        margin-bottom: 8px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-price {
        font-size: 1.2rem;
        font-weight: bold;
        color: #2ecc71;
        margin-bottom: 6px;
    }

    .product-rating {
        font-size: 0.85rem;
        color: #666;
        margin-bottom: 6px;
    }

        .product-rating span {
            color: #ffd700;
        }

    .product-version {
        font-size: 0.8rem;
        color: #999;
    }

    .pagination-container {
        margin: 15px;
        text-align: center;
    }

    .pagination-button {
        background-color: white;
        border: 1px solid #ddd;
        padding: 6px 12px;
        margin: 0 2px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .pagination-button.active {
            background-color: #2ecc71;
            color: white;
            border-color: #2ecc71;
        }

        .pagination-button:hover:not(.active) {
            background-color: #f5f5f5;
        }

    .product-card.hidden {
        display: none;
    }
</style>

<div class="products-grid" id="productsGrid">
    @foreach (var item in Model)
    {
        <a href="@Url.Action("Details", "Product", new { id = item.ProductId })" class="product-card">
            <div class="product-image-container">
                @if (!string.IsNullOrEmpty(item.ImageList))
                {
                    var images = item.ImageList.Split(',');
                    if (images.Length > 0)
                    {
                        <img src="@Url.Content("~/Content/Images/" + images[0])" alt="@item.ProductName" />
                    }
                }
            </div>
            <div class="product-name">@item.ProductName</div>
            <div class="product-category">Category: @item.Category.CategoryName</div>
            <div class="product-description">@item.Description</div>
            <div class="product-price">$@item.Price.ToString("N2")</div>
            <div class="product-rating">
                Rating: @item.Rating
                @for (int i = 0; i < item.Rating; i++)
                {
                    <span>⭐</span>
                }
            </div>
            <div class="product-version">Version: @item.Version</div>
        </a>
    }
</div>

<div class="pagination-container" id="pagination"></div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const itemsPerPage = 6; // Changed to 6 for better fit in 2 columns
        const productCards = document.querySelectorAll('.product-card');
        const totalPages = Math.ceil(productCards.length / itemsPerPage);
        let currentPage = 1;

        function showPage(page) {
            const start = (page - 1) * itemsPerPage;
            const end = start + itemsPerPage;

            productCards.forEach((card, index) => {
                if (index >= start && index < end) {
                    card.classList.remove('hidden');
                } else {
                    card.classList.add('hidden');
                }
            });
        }

        function createPagination() {
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';

            if (totalPages > 1) {
                const prevButton = document.createElement('button');
                prevButton.innerHTML = '&laquo;';
                prevButton.classList.add('pagination-button');
                prevButton.onclick = () => {
                    if (currentPage > 1) {
                        currentPage--;
                        updatePagination();
                    }
                };
                paginationContainer.appendChild(prevButton);
            }

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.classList.add('pagination-button');
                if (i === currentPage) {
                    button.classList.add('active');
                }
                button.onclick = () => {
                    currentPage = i;
                    updatePagination();
                };
                paginationContainer.appendChild(button);
            }

            if (totalPages > 1) {
                const nextButton = document.createElement('button');
                nextButton.innerHTML = '&raquo;';
                nextButton.classList.add('pagination-button');
                nextButton.onclick = () => {
                    if (currentPage < totalPages) {
                        currentPage++;
                        updatePagination();
                    }
                };
                paginationContainer.appendChild(nextButton);
            }
        }

        function updatePagination() {
            showPage(currentPage);
            const buttons = document.querySelectorAll('.pagination-button');
            buttons.forEach((button, index) => {
                if (index === currentPage) {
                    button.classList.add('active');
                } else {
                    button.classList.remove('active');
                }
            });
        }

        createPagination();
        showPage(1);
    });
</script>