@model IEnumerable<WebStore.Models.Product>
@{
    ViewBag.Title = "Home";
}

<!-- CSS giữ nguyên -->

<div class="search-filter-container mb-4">
    <div class="row">
        <div class="col-md-4">
            <input type="text" id="searchInput" class="form-control" placeholder="Search products...">
        </div>
        <div class="col-md-3">
            <select id="categoryFilter" class="form-control">
                <option value="">All Categories</option>
                @foreach (var category in ViewBag.Categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <select id="sortOrder" class="form-control">
                <option value="">Sort By</option>
                <option value="priceAsc">Price: Low to High</option>
                <option value="priceDesc">Price: High to Low</option>
                <option value="nameAsc">Name: A to Z</option>
                <option value="nameDesc">Name: Z to A</option>
                <option value="ratingDesc">Highest Rated</option>
            </select>
        </div>
    </div>
</div>

<h2 class="section-title">Our Products</h2>

<div id="productsContainer" class="products-container">
    @Html.Partial("_ProductList", Model)
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        let isLoading = false;

        function loadProducts() {
            if (isLoading) return;
            isLoading = true;

            const searchTerm = $('#searchInput').val();
            const categoryId = $('#categoryFilter').val();
            const sortOrder = $('#sortOrder').val();

            $.ajax({
                url: '@Url.Action("GetProductList", "Home")',
                type: 'POST',
                data: {
                    searchTerm: searchTerm,
                    categoryId: categoryId,
                    sortOrder: sortOrder,
                    page: currentPage
                },
                success: function (result) {
                    if (currentPage === 1) {
                        $('#productsContainer').html(result.html);
                    } else {
                        $('#productsContainer').append(result.html);
                    }
                    isLoading = false;
                },
                error: function () {
                    isLoading = false;
                }
            });
        }

        // Event handlers
        $('#searchInput').on('input', debounce(function () {
            currentPage = 1;
            loadProducts();
        }, 500));

        $('#categoryFilter, #sortOrder').change(function () {
            currentPage = 1;
            loadProducts();
        });

        // Infinite scroll
        $(window).scroll(function () {
            if ($(window).scrollTop() + $(window).height() > $(document).height() - 100) {
                currentPage++;
                loadProducts();
            }
        });

        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function () {
                const context = this;
                const args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(function () {
                    func.apply(context, args);
                }, wait);
            };
        }
    </script>
}